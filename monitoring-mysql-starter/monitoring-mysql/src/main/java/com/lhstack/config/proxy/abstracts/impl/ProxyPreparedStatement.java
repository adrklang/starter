package com.lhstack.config.proxy.abstracts.impl;

import com.lhstack.config.proxy.abstracts.AbstractProxyPreparedStatement;
import lombok.SneakyThrows;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class ProxyPreparedStatement extends AbstractProxyPreparedStatement {

    public ProxyPreparedStatement(PreparedStatement statement) {
        super(statement);
    }

    @Override
    @SneakyThrows
    public ResultSet executeQuery() throws SQLException {
        return (ResultSet) obServerConsumer.buildMetaData().addMetadata("statement",preparedStatement)
                .apply(() -> preparedStatement.executeQuery());
    }

    @Override
    @SneakyThrows
    public int executeUpdate() throws SQLException {
        return (int) obServerConsumer.buildMetaData().addMetadata("statement",preparedStatement)
                .apply(() -> preparedStatement.executeUpdate());
    }

    @Override
    @SneakyThrows
    public boolean execute() throws SQLException {
        return (boolean) obServerConsumer.buildMetaData().addMetadata("statement",preparedStatement)
                .apply(preparedStatement::execute);
    }

    @Override
    @SneakyThrows
    public ResultSet executeQuery(String sql) throws SQLException {
        return (ResultSet) obServerConsumer.buildMetaData().addMetadata("statement",preparedStatement)
                .addMetadata("sql",sql)
                .apply(() -> preparedStatement.executeQuery(sql));
    }

    @Override
    @SneakyThrows
    public int executeUpdate(String sql) throws SQLException {
        return (int) obServerConsumer.buildMetaData().addMetadata("statement",preparedStatement)
                .addMetadata("sql",sql)
                .apply(() -> preparedStatement.executeUpdate(sql));
    }

    @Override
    @SneakyThrows
    public boolean execute(String sql) throws SQLException {
        return (boolean) obServerConsumer.buildMetaData().addMetadata("statement",preparedStatement)
                .addMetadata("sql",sql)
                .apply(() -> preparedStatement.execute(sql));
    }

    @Override
    @SneakyThrows
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        return (int) obServerConsumer.buildMetaData().addMetadata("statement",preparedStatement)
                .addMetadata("sql",sql)
                .addMetadata("autoGeneratedKeys",autoGeneratedKeys)
                .apply(() -> preparedStatement.executeUpdate(sql,autoGeneratedKeys));
    }

    @Override
    @SneakyThrows
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        return (int) obServerConsumer.buildMetaData().addMetadata("statement",preparedStatement)
                .addMetadata("sql",sql)
                .addMetadata("columnIndexes",columnIndexes)
                .apply(() -> preparedStatement.executeUpdate(sql,columnIndexes));
    }

    @Override
    @SneakyThrows
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        return (int) obServerConsumer.buildMetaData().addMetadata("statement",preparedStatement)
                .addMetadata("sql",sql)
                .addMetadata("columnNames",columnNames)
                .apply(() -> preparedStatement.executeUpdate(sql,columnNames));
    }

    @Override
    @SneakyThrows
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        return (boolean) obServerConsumer.buildMetaData().addMetadata("statement",preparedStatement)
                .addMetadata("sql",sql)
                .addMetadata("autoGeneratedKeys",autoGeneratedKeys)
                .apply(() -> preparedStatement.execute(sql,autoGeneratedKeys));
    }

    @Override
    @SneakyThrows
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        return (boolean) obServerConsumer.buildMetaData().addMetadata("statement",preparedStatement)
                .addMetadata("sql",sql)
                .addMetadata("columnIndexes",columnIndexes)
                .apply(() -> preparedStatement.execute(sql,columnIndexes));
    }

    @Override
    @SneakyThrows
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        return (boolean) obServerConsumer.buildMetaData().addMetadata("statement",preparedStatement)
                .addMetadata("sql",sql)
                .addMetadata("columnNames",columnNames)
                .apply(() -> preparedStatement.execute(sql,columnNames));
    }
}
